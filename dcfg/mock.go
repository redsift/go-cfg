// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redsift/go-cfg/dcfg (interfaces: Backend,Map,Slice,Stream)
//
// Generated by this command:
//
//	mockgen -package dcfg -destination=mock.go . Backend,Map,Slice,Stream
//

// Package dcfg is a generated GoMock package.
package dcfg

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBackend) Delete(ctx context.Context, key Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBackendMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackend)(nil).Delete), ctx, key)
}

// Load mocks base method.
func (m *MockBackend) Load(ctx context.Context, key Key, target any) (Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, key, target)
	ret0, _ := ret[0].(Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockBackendMockRecorder) Load(ctx, key, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockBackend)(nil).Load), ctx, key, target)
}

// Map mocks base method.
func (m *MockBackend) Map(key Key) Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map", key)
	ret0, _ := ret[0].(Map)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockBackendMockRecorder) Map(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockBackend)(nil).Map), key)
}

// Slice mocks base method.
func (m *MockBackend) Slice(key Key) Slice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", key)
	ret0, _ := ret[0].(Slice)
	return ret0
}

// Slice indicates an expected call of Slice.
func (mr *MockBackendMockRecorder) Slice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockBackend)(nil).Slice), key)
}

// Store mocks base method.
func (m *MockBackend) Store(ctx context.Context, key Key, meta *Meta, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, key, meta, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockBackendMockRecorder) Store(ctx, key, meta, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBackend)(nil).Store), ctx, key, meta, value)
}

// Subscribe mocks base method.
func (m *MockBackend) Subscribe(ctx context.Context, key Key) (Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, key)
	ret0, _ := ret[0].(Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockBackendMockRecorder) Subscribe(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockBackend)(nil).Subscribe), ctx, key)
}

// MockMap is a mock of Map interface.
type MockMap struct {
	ctrl     *gomock.Controller
	recorder *MockMapMockRecorder
	isgomock struct{}
}

// MockMapMockRecorder is the mock recorder for MockMap.
type MockMapMockRecorder struct {
	mock *MockMap
}

// NewMockMap creates a new mock instance.
func NewMockMap(ctrl *gomock.Controller) *MockMap {
	mock := &MockMap{ctrl: ctrl}
	mock.recorder = &MockMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMap) EXPECT() *MockMapMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockMap) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockMapMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockMap)(nil).Clear), ctx)
}

// DelKey mocks base method.
func (m *MockMap) DelKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelKey indicates an expected call of DelKey.
func (mr *MockMapMockRecorder) DelKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelKey", reflect.TypeOf((*MockMap)(nil).DelKey), ctx, key)
}

// GetKey mocks base method.
func (m *MockMap) GetKey(ctx context.Context, key string, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, key, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockMapMockRecorder) GetKey(ctx, key, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockMap)(nil).GetKey), ctx, key, target)
}

// Load mocks base method.
func (m *MockMap) Load(ctx context.Context, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockMapMockRecorder) Load(ctx, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockMap)(nil).Load), ctx, target)
}

// SetKey mocks base method.
func (m *MockMap) SetKey(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKey indicates an expected call of SetKey.
func (mr *MockMapMockRecorder) SetKey(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockMap)(nil).SetKey), ctx, key, value)
}

// Update mocks base method.
func (m *MockMap) Update(ctx context.Context, values map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMapMockRecorder) Update(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMap)(nil).Update), ctx, values)
}

// MockSlice is a mock of Slice interface.
type MockSlice struct {
	ctrl     *gomock.Controller
	recorder *MockSliceMockRecorder
	isgomock struct{}
}

// MockSliceMockRecorder is the mock recorder for MockSlice.
type MockSliceMockRecorder struct {
	mock *MockSlice
}

// NewMockSlice creates a new mock instance.
func NewMockSlice(ctrl *gomock.Controller) *MockSlice {
	mock := &MockSlice{ctrl: ctrl}
	mock.recorder = &MockSliceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlice) EXPECT() *MockSliceMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockSlice) Append(ctx context.Context, items ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockSliceMockRecorder) Append(ctx any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockSlice)(nil).Append), varargs...)
}

// Load mocks base method.
func (m *MockSlice) Load(ctx context.Context, items any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockSliceMockRecorder) Load(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSlice)(nil).Load), ctx, items)
}

// RemoveItems mocks base method.
func (m *MockSlice) RemoveItems(ctx context.Context, items ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItems indicates an expected call of RemoveItems.
func (mr *MockSliceMockRecorder) RemoveItems(ctx any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItems", reflect.TypeOf((*MockSlice)(nil).RemoveItems), varargs...)
}

// Store mocks base method.
func (m *MockSlice) Store(ctx context.Context, items ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockSliceMockRecorder) Store(ctx any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSlice)(nil).Store), varargs...)
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
	isgomock struct{}
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Decode mocks base method.
func (m *MockStream) Decode(arg0 any) (Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockStreamMockRecorder) Decode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockStream)(nil).Decode), arg0)
}

// Next mocks base method.
func (m *MockStream) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockStreamMockRecorder) Next(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStream)(nil).Next), arg0)
}
